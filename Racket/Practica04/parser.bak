#lang plai
(require (file "./grammars.rkt"))

;; Toma una lista de números, symbolos o listas
;; y la traduce a un árbol de sintaxis abstracta CFWAE
;; A::=<number>
;;    | <symbol>
;;    | listof(A)
;; parse: A -> CFWAE
;; parse: s-expression -> CFWAE
(define (parse sexp)
   (cond
     [(symbol? sexp) (cond
                                   [(symbol=? 'true sexp) (boolS #t)]
                                   [(symbol=? 'false sexp) (boolS #f)]
                                   [else (idS sexp)])]
     [(number? sexp) (numS sexp)]
     [(boolean? sexp) (boolS sexp)]
     [(list? sexp) (let* ([x (car sexp)] [xs (cdr sexp)])
                             (case x
                               [(if) (if (= (length xs) 3)
                                          (let ([a (car xs)] [b (cadr xs)] [c (caddr xs)]) (iFS (parse a) (parse b) (parse c)))
                                          (error "Falta la else-expresion"))]
                               [(+) (opS + (parse xs))]
                               [(-) (opS - (parse xs))]
                               [(*) (opS * (parse xs))]
                               [(/) (opS / (parse xs))]
                               [(modulo) (if (equal? (length xs) 2) (opS modulo (parse xs)) (error "Aridad incorrecta"))]
                               [(expt) (if (equal? (length xs) 2) (opS expt (parse xs)) (error "Aridad incorrecta"))]
                               [(add1) (if (equal? (length xs) 1) (opS add1 (parse xs)) (error "Aridad incorrecta"))]
                               [(sub1) (if (equal? (length xs) 1) (opS sub1 (parse xs)) (error "Aridad incorrecta"))]
                               [(with) (withS (for/list ([i (car xs)]) (binding (car i) (parse (cadr i)))) (parse (cadr xs)))]
                               [(with*) (withS* (for/list ([i (car xs)]) (binding (car i) (parse (cadr i)))) (parse (cadr xs)))]
                               [(fun) (funS (car xs) (parse (cadr xs)))]
                               [else (parse-app sexp)]))]))
